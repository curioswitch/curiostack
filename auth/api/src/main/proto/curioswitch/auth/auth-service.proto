/*
 * MIT License
 *
 * Copyright (c) 2018 Choko (choko@curioswitch.org)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
syntax = "proto3";

package curioswitch.auth;

option java_package = "org.curioswitch.auth.api";
option java_multiple_files = true;

// A request containing user credentials to try to authenticate
// the user.
message AuthenticateRequest {

  // The type of credential included in the request.
  enum CredentialType {
    // An unknown credential type.
    UNKNOWN = 0;

    // A firebase token retrieved by the firebase client library.
    // Will be included in AuthenticateRequest.token.
    FIREBASE_TOKEN = 1;
  }
  // The type of credential.
  CredentialType credential_type = 1;

  // A credential that is a single token string.
  string token = 2;
}

// A response containing the result of user authentication.
message AuthenticateResponse {

  // Result of authenticating the user.
  enum Result {
    // An unknown result.
    UNKNOWN = 0;

    // The user was successfully authenticated.
    AUTHENTICATED = 1;

    // The credential was not formatted correctly.
    INVALID_CREDENTIAL = 2;

    // The credential could not be used to login the user.
    WRONG_CREDENTIAL = 3;
  }
  // The authentication result.
  Result result = 1;

  // The id of the user.
  string user_id = 2;

  // The email address of the user.
  string email = 3;
}

// A service for authenticating and authorizing users to other services. All
// auth actions for Curiostack services are handled by AuthService.
service AuthService {

  // Authenticate the user based on a logged-in credential. This is not a raw
  // credential (e.g., username / password) but rather a token generated after
  // executing a login action (e.g., using the firebase client library).
  rpc Authenticate(AuthenticateRequest) returns (AuthenticateResponse);
}
