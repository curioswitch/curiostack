/*
 * MIT License
 *
 * Copyright (c) 2017 Choko (choko@curioswitch.org)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

buildscript {
    repositories {
        jcenter()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
        maven {
            url 'http://dl.bintray.com/curioswitch/curiostack'
        }
        maven {
            url 'http://palantir.bintray.com/releases'
        }
        mavenLocal()
    }
    dependencies {
        classpath 'org.curioswitch.curiostack:gradle-curiostack-plugin:0.0.21'
    }
}

plugins {
    id 'me.champeau.gradle.jmh' version '0.3.1' apply false
}

apply plugin: 'org.curioswitch.gradle-curiostack-plugin'

allprojects {
    project.group = 'org.curioswitch.curiostack'

    plugins.withType(JavaPlugin) {
        dependencyManagement {
            dependencies {
                dependency 'com.moowork.gradle:gradle-node-plugin:1.1.1'
            }
        }

        dependencies {
            compileOnly 'com.google.code.findbugs:jsr305:3.0.2'
        }
    }

    plugins.withId 'me.champeau.gradle.jmh', {
        jmh {
            // Benchmarks are usually very small and converge quickly. If this stops being the case
            // these numbers can be adjusted.
            fork = 2
            iterations = 5

            profilers = ['hs_comp']
            jmhVersion = '1.18'

            if (rootProject.hasProperty('jmhRegex')) {
                include rootProject.getProperty('jmhRegex')
            }
        }

        configurations {
            // We will use the jmhManaged for any dependencies that should only be applied to JMH
            // but should be resolved by our managed dependencies. We need a separate configuration
            // to be able to provide the resolution workaround described below.
            jmhManaged
            jmh.extendsFrom jmhManaged
        }

        // JMH plugin uses a detached configuration to build an uber-jar, which dependencyManagement
        // doesn't know about. Work around this by forcing parent configurations to be resolved and
        // added directly to the jmh configuration, which overwrites the otherwise unresolvable
        // dependency.
        afterEvaluate {
            configurations.jmh.extendsFrom.each { parent ->
                parent.resolvedConfiguration.firstLevelModuleDependencies.each { dep ->
                    dependencies {
                        jmh "${dep.module}"
                    }
                }
            }
        }
    }

    plugins.withType(org.gradle.api.publish.maven.plugins.MavenPublishPlugin) {
        project.apply plugin: 'com.jfrog.bintray'

        def bintrayUser = findProperty('bintray.user')
        def bintrayKey = findProperty('bintray.key')

        afterEvaluate {
            bintray {
                publish = true
                user = bintrayUser
                key = bintrayKey
                pkg {
                    name = project.archivesBaseName
                    repo = 'curiostack'
                    userOrg = 'curioswitch'
                    licenses = ['MIT']
                    vcsUrl = 'https://github.com/curioswitch/curiostack.git'
                    githubRepo = 'curioswitch/curiostack'
                    version {
                        name = project.version
                        gpg {
                            // Use bintray's keys for signing since there isn't much of a difference
                            // in security vs giving them your own private keys - either way bintray
                            // is trusted as the identity provider of your packages.
                            sign = true
                        }
                    }
                }
                publications = ['maven']
            }

            publishing {
                publications {
                    maven(MavenPublication) {
                        from components.java

                        artifactId = project.archivesBaseName

                        artifact project.tasks.javadocJar
                        artifact project.tasks.sourceJar

                        pom.withXml {
                            asNode().children()[6] + {
                                resolveStrategy = Closure.DELEGATE_FIRST

                                licenses {
                                    license {
                                        name 'MIT License'
                                        url 'https://opensource.org/licenses/MIT'
                                        distribution 'repo'
                                    }
                                }
                                developers {
                                    developer {
                                        id 'chokoswitch'
                                        name 'Choko'
                                        email 'choko@curioswitch.org'
                                        organization 'CurioSwitch'
                                        organizationUrl 'https://github.com/curioswitch/curiostack'
                                    }
                                }

                                scm {
                                    connection 'scm:git:git://github.com/curioswitch/curiostack.git'
                                    developerConnection 'scm:git:ssh://github.com:curioswitch/curiostack.git'
                                    url 'https://github.com/curioswitch/curiostack'
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

gcloud {
    clusterBaseName = 'curioswitch'
    cloudRegion = 'asia-northeast1'
    clusterKubernetesVersion = '1.6.1'
}
